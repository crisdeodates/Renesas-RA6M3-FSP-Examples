/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.4.0.0                                               */
/*  Date (dd.mm.yyyy): 21. 5.2025   Time (hh:mm): 11:43                        */
/*******************************************************************************/


#ifndef _THERMOSTAT_SPECIFICATIONS_H_
#define _THERMOSTAT_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_HELP_SCREEN 1
#define ID_THERMO_HELP 2
#define ID_HELP_CLOSE_BUTTON 3
#define ID_TIME_TEXT 4
#define ID_DATE_TEXT 5
#define ID_TEMP_TEXT 6
#define ID_TEMP_UNIT_TEXT 7
#define ID_FAN_ICON 8
#define ID_THERMOSTAT_SCREEN 9
#define ID_THERMO_CONTENT 10
#define ID_THERMO_PANE 11
#define ID_THERMOSTAT_BACK_BUTTON 12
#define ID_FAN_BUTTON 13
#define ID_FAN_MODE_TEXT 14
#define ID_SYSTEM_BUTTON 15
#define ID_SYSTEM_MODE_TEXT 16
#define ID_TEMP_TEXT_1 17
#define ID_TEMP_UNIT_TEXT_1 18
#define ID_THERMO_CONTROL 19
#define ID_HELP_BUTTON 20
#define ID_TEMP_UP 21
#define ID_TEMP_DOWN 22
#define ID_SET_TO_TEXT 23
#define ID_THERMO_TARGET_TEMP_DEGREE_TEXT 24
#define ID_TEMP_UNIT_TEXT_2 25
#define ID_THERMO_SYSTEM_OFF 26
#define ID_SETTINGS_SCREEN 27
#define ID_SETTINGS_CONTENT_DISPLAY 28
#define ID_BACK_BUTTON 29
#define ID_BRIGHTNESS_DOWN 30
#define ID_BRIGHTNESS_UP 31
#define ID_BRIGHTNESS_TEXT 32
#define ID_SETTINGS_CONTENT_NONE 33
#define ID_SETTINGS_CONTENT_SOUND 34
#define ID_VOLUME_DOWN 35
#define ID_VOLUME_UP 36
#define ID_VOLUME_TEXT 37
#define ID_SETTINGS_CONTENT_THERMO 38
#define ID_CELSIUS_BUTTON 39
#define ID_FAHRENHEIT_BUTTON 40
#define ID_SETTINGS_CONTENT_TIME 41
#define ID_HOUR_MODE_TOGGLE 42
#define ID_HOUR_UP 43
#define ID_HOUR_DOWN 44
#define ID_MINUTE_UP 45
#define ID_MINUTE_DOWN 46
#define ID_AM_PM_TOGGLE 47
#define ID_TIME_FORMAT_TEXT 48
#define ID_HOUR_TEXT 49
#define ID_MINUTE_TEXT 50
#define ID_PERIOD_TEXT 51
#define ID_SETTINGS_CONTENT_DATE 52
#define ID_YEAR_UP 53
#define ID_YEAR_DOWN 54
#define ID_MONTH_UP 55
#define ID_MONTH_DOWN 56
#define ID_DAY_UP 57
#define ID_DAY_DOWN 58
#define ID_YEAR_TEXT 59
#define ID_MONTH_TEXT 60
#define ID_DAY_TEXT 61
#define ID_SETTINGS_MENUITEMS 62
#define ID_SETTINGS_MENUITEM_THERMOSTAT 63
#define ID_SETTINGS_MENUITEM_DISPLAY 64
#define ID_SETTINGS_MENUITEM_TIME 65
#define ID_SETTINGS_MENUITEM_DATE 66
#define ID_SETTINGS_MENUITEM_NONE 67
#define ID_MAINPAGE_SCREEN 68
#define ID_THERMO_BUTTON 69
#define ID_SETTINGS_BUTTON 70
#define ID_TEMP_TEXT_2 71
#define ID_WEEKDAY_TEXT 72
#define ID_VER_TEXT 73


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct HELP_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW Help_Help;
    GX_PIXELMAP_BUTTON Help_CloseButton;
    GX_PROMPT Help_HelpTitle;
    GX_WINDOW Help_NotificationBar;
    GX_PROMPT Help_TimeText;
    GX_PROMPT Help_DateText;
    GX_PROMPT Help_TempText;
    GX_PROMPT Help_DegreeTitle;
    GX_PROMPT Help_TempUnitText;
    GX_ICON Help_Fan;
} HELP_CONTROL_BLOCK;

typedef struct THERMOSTAT_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW Thermostat_Content;
    GX_WINDOW Thermostat_Thermostat;
    GX_PIXELMAP_BUTTON Thermostat_BackButton;
    GX_PIXELMAP_BUTTON Thermostat_FanButton;
    GX_PROMPT Thermostat_ModeText_1;
    GX_PIXELMAP_BUTTON Thermostat_SystemButton;
    GX_PROMPT Thermostat_ModeText_2;
    GX_PROMPT Thermostat_FanTitle;
    GX_PROMPT Thermostat_SystemTitle;
    GX_PROMPT Thermostat_PageTitle_1;
    GX_PROMPT Thermostat_IndoorTempTitle;
    GX_PROMPT Thermostat_IndoorTempText;
    GX_PROMPT Thermostat_DegreeTitle_2;
    GX_PROMPT Thermostat_UnitText_2;
    GX_WINDOW Thermostat_ThermostatControl;
    GX_PIXELMAP_BUTTON Thermostat_Help_Button;
    GX_PROMPT Thermostat_HelpTitle_1;
    GX_ICON Thermostat_ArrowImg_1;
    GX_PIXELMAP_BUTTON Thermostat_TempUp;
    GX_PIXELMAP_BUTTON Thermostat_TempDown;
    GX_PROMPT Thermostat_SetToTempText;
    GX_PROMPT Thermostat_SetToTitle;
    GX_PROMPT Thermostat_DegreeTitle_1;
    GX_PROMPT Thermostat_UnitText_1;
    GX_PROMPT Thermostat_SystemOffTitle;
    GX_WINDOW Thermostat_NotificationBar;
    GX_PROMPT Thermostat_TimeText_1;
    GX_PROMPT Thermostat_DateText_1;
    GX_PROMPT Thermostat_TempText_1;
    GX_PROMPT Thermostat_DegreeTitle_3;
    GX_PROMPT Thermostat_TempUnitText_1;
    GX_ICON Thermostat_Fan_1;
} THERMOSTAT_CONTROL_BLOCK;

typedef struct SETTINGS_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW Settings_Content;
    GX_WINDOW Settings_Display;
    GX_PIXELMAP_BUTTON Settings_BackButton_3;
    GX_PIXELMAP_BUTTON Settings_BrightnessDown;
    GX_PIXELMAP_BUTTON Settings_BrightnessUp;
    GX_PROMPT Settings_BrightnessTitle;
    GX_PROMPT Settings_BrightnessText;
    GX_WINDOW Settings_BlankContent;
    GX_PIXELMAP_BUTTON Settings_BackButton_1;
    GX_PROMPT Settings_BlankMenuTitle;
    GX_WINDOW Settings_Sound;
    GX_PIXELMAP_BUTTON Settings_BackButton_6;
    GX_PIXELMAP_BUTTON Settings_VolumeDown;
    GX_PIXELMAP_BUTTON Settings_VolumeUp;
    GX_PROMPT Settings_VolumeTitle;
    GX_PROMPT Settings_VolumeText;
    GX_WINDOW Settings_Thermostat;
    GX_PIXELMAP_BUTTON Settings_BackButton_2;
    GX_PIXELMAP_BUTTON Settings_Celcius;
    GX_PROMPT Settings_CelciusTitle;
    GX_PIXELMAP_BUTTON Settings_Fahrenheit;
    GX_PROMPT Settings_FahrenheitTitle;
    GX_PROMPT Settings_TempUnitsTitle;
    GX_WINDOW Settings_SetTime;
    GX_PIXELMAP_BUTTON Settings_BackButton_4;
    GX_PROMPT Settings_FormatTitle;
    GX_PROMPT Settings_HourTitle;
    GX_PROMPT Settings_MinuteTitle;
    GX_PROMPT Settings_PeriodTitle;
    GX_PIXELMAP_BUTTON Settings_FormatUp;
    GX_PIXELMAP_BUTTON Settings_FormatDown;
    GX_PIXELMAP_BUTTON Settings_HourUp;
    GX_PIXELMAP_BUTTON Settings_HourDown;
    GX_PIXELMAP_BUTTON Settings_MinuteUp;
    GX_PIXELMAP_BUTTON Settings_MinuteDown;
    GX_PIXELMAP_BUTTON Settings_PeriodUp;
    GX_PIXELMAP_BUTTON Settings_PeriodDown;
    GX_PROMPT Settings_FormatText;
    GX_PROMPT Settings_HourText;
    GX_PROMPT Settings_MinuteText;
    GX_PROMPT Settings_PeriodText;
    GX_WINDOW Settings_SetDate;
    GX_PROMPT Settings_MonthTitle;
    GX_PROMPT Settings_DayTitle;
    GX_PIXELMAP_BUTTON Settings_YearUp;
    GX_PIXELMAP_BUTTON Settings_YearDown;
    GX_PIXELMAP_BUTTON Settings_MonthUp;
    GX_PIXELMAP_BUTTON Settings_MonthDown;
    GX_PIXELMAP_BUTTON Settings_DayUp;
    GX_PIXELMAP_BUTTON Settings_DayDown;
    GX_PROMPT Settings_YearText;
    GX_PROMPT Settings_MonthText;
    GX_PROMPT Settings_DayText;
    GX_PIXELMAP_BUTTON Settings_BackButton_5;
    GX_PROMPT Settings_YearTitle;
    GX_WINDOW Settings_Menu;
    GX_WINDOW Settings_MenuItems;
    GX_PIXELMAP_BUTTON Settings_MenuItemThermostat;
    GX_PROMPT Settings_ThermostatTitle;
    GX_PIXELMAP_BUTTON Settings_MenuItemDisplay;
    GX_PROMPT Settings_DisplayTitle;
    GX_PIXELMAP_BUTTON Settings_MenuItemTime;
    GX_PROMPT Settings_TimeTitle;
    GX_PIXELMAP_BUTTON Settings_MenuItemDate;
    GX_PROMPT Settings_DateTitle;
    GX_ICON Settings_MenuItemNone;
    GX_WINDOW Settings_NotificationBar;
    GX_PROMPT Settings_TimeText_2;
    GX_PROMPT Settings_DateText_2;
    GX_PROMPT Settings_TempText_2;
    GX_PROMPT Settings_DegreeTitle_4;
    GX_PROMPT Settings_TempUnitText_2;
    GX_ICON Settings_Fan_2;
} SETTINGS_CONTROL_BLOCK;

typedef struct MAINPAGE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW MainPage_Content;
    GX_PIXELMAP_BUTTON MainPage_ThermoButton;
    GX_PROMPT MainPage_ThermostatTitle;
    GX_PROMPT MainPage_IndoorTitle;
    GX_PROMPT MainPage_SetToTitle;
    GX_PROMPT MainPage_FanModeTitle;
    GX_PROMPT MainPage_SystemModeTitle;
    GX_PROMPT MainPage_IndoorTempText;
    GX_PROMPT MainPage_SetToTempText;
    GX_PROMPT MainPage_FanModeText;
    GX_PROMPT MainPage_SystemModeText;
    GX_PROMPT MainPage_SetToTempUnitText;
    GX_PROMPT MainPage_SetToDegreeTitle;
    GX_PROMPT MainPage_IndoorTempUnitText;
    GX_PROMPT MainPage_IndoorDegreeTitle;
    GX_PIXELMAP_BUTTON MainPage_SettingsButton;
    GX_PROMPT MainPage_SettingsTitle;
    GX_WINDOW MainPage_NotificationBar;
    GX_PROMPT MainPage_TimeText_3;
    GX_PROMPT MainPage_DateText_3;
    GX_PROMPT MainPage_TempText_3;
    GX_PROMPT MainPage_DegreeTitle_5;
    GX_PROMPT MainPage_TempUnitText_3;
    GX_ICON MainPage_Fan_3;
} MAINPAGE_CONTROL_BLOCK;

typedef struct SPLASH_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT Splash_DayText;
    GX_PROMPT Splash_DateText;
    GX_PROMPT Splash_TimeText;
    GX_PROMPT Splash_VersionText;
} SPLASH_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern HELP_CONTROL_BLOCK Help;
extern THERMOSTAT_CONTROL_BLOCK Thermostat;
extern SETTINGS_CONTROL_BLOCK Settings;
extern MAINPAGE_CONTROL_BLOCK MainPage;
extern SPLASH_CONTROL_BLOCK Splash;
#endif

/* Prototype Dave2D display driver specific functions                          */

UINT _gx_ra_display_driver_setup(GX_DISPLAY *display);
#if defined(GX_TARGET_WIN32) || defined(GX_TARGET_LINUX)
UINT win32_dave2d_graphics_driver_setup_565rgb(GX_DISPLAY *display);
#else
VOID _gx_display_driver_565rgb_setup(GX_DISPLAY *display, VOID *aux_data,
                           VOID (*toggle_function)(struct GX_CANVAS_STRUCT *canvas,
                           GX_RECTANGLE *dirty_area));
VOID _gx_dave2d_horizontal_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT ypos);
VOID _gx_dave2d_vertical_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT ystart, INT yend, INT xpos);
VOID _gx_dave2d_pixel_write_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR color);
VOID _gx_dave2d_pixel_blend_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR fcolor, GX_UBYTE alpha);
VOID _gx_dave2d_pixelmap_rotate_16bpp(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap, INT angle, INT rot_cx, INT rot_cy);
VOID _gx_dave2d_drawing_initiate(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_drawing_complete(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_horizontal_line(GX_DRAW_CONTEXT *context,
                             INT xstart, INT xend, INT ypos, INT width, GX_COLOR color);
VOID _gx_dave2d_vertical_line(GX_DRAW_CONTEXT *context,
                             INT ystart, INT yend, INT xpos, INT width, GX_COLOR color);
VOID _gx_dave2d_canvas_copy(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_canvas_blend(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_simple_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_simple_wide_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart,
                                INT xend, INT yend);
VOID _gx_dave2d_aliased_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_aliased_wide_line(GX_DRAW_CONTEXT *context, INT xstart,
                                        INT ystart, INT xend, INT yend);
VOID _gx_dave2d_pixelmap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_horizontal_pixelmap_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT y, GX_FILL_PIXELMAP_INFO *info);
VOID _gx_dave2d_pixelmap_blend(GX_DRAW_CONTEXT *context, INT xpos, INT ypos,
                                      GX_PIXELMAP *pixelmap, GX_UBYTE alpha);
VOID _gx_dave2d_polygon_draw(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_polygon_fill(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_block_move(GX_DRAW_CONTEXT *context,
                          GX_RECTANGLE *block, INT xshift, INT yshift);
VOID _gx_dave2d_alphamap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_compressed_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_buffer_toggle(GX_CANVAS *canvas, GX_RECTANGLE *dirty);
#if defined(GX_ARC_DRAWING_SUPPORT)
VOID _gx_dave2d_aliased_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_pie_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
#endif
VOID _gx_renesas_jpeg_draw (GX_DRAW_CONTEXT *p_context, INT x, INT y, GX_PIXELMAP *p_pixelmap);

#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT help_screen_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT thermostat_screen_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT settings_screen_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT mainpage_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT splashscreen_event(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
