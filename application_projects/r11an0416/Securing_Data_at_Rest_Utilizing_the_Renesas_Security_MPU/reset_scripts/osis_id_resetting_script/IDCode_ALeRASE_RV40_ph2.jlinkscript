void wake_and_authenticate(void)
{
	int v;
	
	int iauth0;
	int iauth1;
	int iauth2;
	int iauth3;
	
	Report("ALeRASE CMD ");
	iauth0 = 0xFFFFFFFF; //(ALeRASE command)
	iauth1 = 0xFFFFFFFF;
	iauth2 = 0x415345FF;
	iauth3 = 0x414C6552;
	
	//JLink-OB only supports SWD
	if (JLINK_ActiveTIF == JLINK_TIF_JTAG)
	{	
		//Simple setup where we have TDI-> Cortex-M (4-bits IRLen) -> TDO
		Report("JTAG: ");
		JLINK_CORESIGHT_Configure("IRPre=0;DRPre=0;IRPost=0;DRPost=0;IRLenDevice=4"); 
	}
	else
	{
		//For SWD no special setup, just output the switching sequence
		Report("SWO:\r\n\r\n");
		JLINK_CORESIGHT_Configure(""); 
	}
	
	v = JLINK_CORESIGHT_ReadDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT); //read the DP.CTRL/STAT register
	Report1("DAP-CtrlStat: ", v);
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT, 0x50000000); //write 0x50000000 to the DP.CTRL/STAT register
	
	while ((v & 0xf0000000) == 0)
	{	
		v = JLINK_CORESIGHT_ReadDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT); //poll the DP.CTRL/STAT register for 0xf0000000
		Report1("DAP-CtrlStat: ", v);
		SYS_Sleep(1);
	}
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (1 << 24) | (0 << 4));  // Select AP[1] (APB-AP), bank 0
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_CTRL, (0) | (2 << 0) | (1 << 31)); // AP-access size. Fixed to 2: 32-bit  // Enable software access to the Debug APB bus.
	
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000000); //IAUTH0 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, iauth0);

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000100); //IAUTH1 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, iauth1);

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000200); //IAUTH2 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, iauth2);

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000300); //IAUTH3 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, iauth3);
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (2 << 24) | (0 << 4));  // Select AP[1] (APB-AP), bank 0
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT, 0x40000000); //write 0x40000000 to the DP.CTRL/STAT register, request DBG power down
	

	v = 0;
	while ((v & 0xC0000000) != 0xC0000000)
	{	
		v = JLINK_CORESIGHT_ReadDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT); //poll the DP.CTRL/STAT register for 0xC0000000. Wait for DBG power down
		Report1("DAP-CtrlStat: ", v);
		SYS_Sleep(1);
	}

	Report("RESET assert");
	JTAG_ResetPin = 0;	
	SYS_Sleep(10);	
	Report("RESET de-assert");
	JTAG_ResetPin = 1;	

	SYS_Sleep(1000); //Sleep to allow Comparator time to compare OCDREG with OSIS after reset and/or boot code to run
	
	//JLink-OB only supports SWD
	if (JLINK_ActiveTIF == JLINK_TIF_JTAG)
	{	
		//Simple setup where we have TDI-> Cortex-M (4-bits IRLen) -> TDO
		Report("JTAG: ");
		JLINK_CORESIGHT_Configure("IRPre=0;DRPre=0;IRPost=0;DRPost=0;IRLenDevice=4"); 
	}
	else
	{
		//For SWD no special setup, just output the switching sequence
		Report("SWO:\r\n\r\n");
		JLINK_CORESIGHT_Configure(""); 
	}
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT, 0x50000000); //write 0x50000000 to the DP.CTRL/STAT register
	
	v = 0;
	while ((v & 0xf0000000) == 0)
	{	
		v = JLINK_CORESIGHT_ReadDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT); //poll the DP.CTRL/STAT register for 0xf0000000
		Report1("DAP-CtrlStat: ", v);
		SYS_Sleep(10);
	}
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (1 << 24) | (0 << 4));  // Select AP[1] (APB-AP), bank 0
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_CTRL, (0) | (2 << 0) | (1 << 31)); // AP-access size. Fixed to 2: 32-bit  // Enable software access to the Debug APB bus.
	
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000400); //MCUSTAT register
	
	v = 0;
	while ((v & 0x00000002) != 0x00000002)
	{
		v = JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
		Report1("MCUSTAT: ", v);
		SYS_Sleep(1000);
	}
	
	// Reset the device so the updated (BLANK) OFS registers are read
	Report("RESET assert");
	JTAG_ResetPin = 0;
	
	SYS_Sleep(10);
	
	Report("RESET de-assert");
	JTAG_ResetPin = 1;
	SYS_Sleep(10);

}

void wake(void)
{
	U8 v;

	v = JLINK_CORESIGHT_ReadDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT); //read the DP.CTRL/STAT register
	Report1("DAP-CtrlStat: ", v);
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT, 0x50000000); //write 0x50000000 to the DP.CTRL/STAT register
	
	v = 0;
	while ((v & 0xf0000000) != 0xf0000000)
	{	
		v = JLINK_CORESIGHT_ReadDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT); //poll the DP.CTRL/STAT register for 0xf0000000
		Report1("DAP-CtrlStat: ", v);
		SYS_Sleep(1);
		JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT, 0x50000000); //write 0x50000000 to the DP.CTRL/STAT register
	}
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (1 << 24) | (0 << 4));  // Select AP[1] (APB-AP), bank 0
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_CTRL, (0) | (2 << 0) | (1 << 31)); // AP-access size. Fixed to 2: 32-bit  // Enable software access to the Debug APB bus.
	
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000000); //IAUTH0 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, 0xFFFFFFFF);

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000100); //IAUTH1 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, 0xFFFFFFFF);

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000200); //IAUTH2 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, 0xFFFFFFFF);

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000300); //IAUTH3 register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, 0xFFFFFFFF);
	
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000400); //MCUSTAT register
	
	v = 0;
	while ((v & 0x00000001) == 0)
	{
		v = JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
		Report1("MCUSTAT: ", v);
		SYS_Sleep(10);
	}
}

void target_setup(void)
{
	U8 v;
	
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (1 << 24) | (0 << 4));  // Select AP[1] (APB-AP), bank 0
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_CTRL, (0) | (2 << 0) | (1 << 31)); // AP-access size. Fixed to 2: 32-bit  // Enable software access to the Debug APB bus.
	
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000410); //MCUCTRL register
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, 0x00000000); //Clear DBIRQ bit
	
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000400); //MCUSTAT register
	v = JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
	
	if ((v & 0x00000001) == 1) // We have authenticated correctly
	{	
		Report1("MCUSTAT: ", v);
		
		JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x80000410); //MCUCTRL register
		v = JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
		
		Report1("MCUCTRL: ", v);
	

		JLINK_MEM_WriteU16(0x4001E3FE, 0xA502);  // PRCR register. Enable access to SYOCDCR register
		JLINK_MEM_WriteU8(0x4001E40E, 0x80);    // SYOCDR register, set DBGEN bit
		JLINK_MEM_WriteU16(0x4001E3FE, 0xA500);  // PRCR register. Disable access to SYOCDCR register
		
		v = JLINK_MEM_ReadU8(0x4001E40E);
		Report1("SYOCDR:  ", v);
		
		v = JLINK_MEM_ReadU32(0x00000000);
		Report1("Memory Address 0: ", v);
		
		v = JLINK_MEM_ReadU32(0x0100A150);
		Report1("OSIS 1: ", v);
		
		v = JLINK_MEM_ReadU32(0x0100A154);
		Report1("OSIS 2: ", v);
		
		v = JLINK_MEM_ReadU32(0x0100A158);
		Report1("OSIS 3: ", v);
		
		v = JLINK_MEM_ReadU32(0x0100A15C);
		Report1("OSIS 4: ", v);
	}
	else
	{

	}
}


void InitTarget(void) 
{	
	Report("\r\nSynergy ALeRASE J-Link script InitTarget\r\n\r\n");

	wake_and_authenticate();

	wake();

}

void SetupTarget(void)
{
	Report("\r\nSynergy ALeRASE J-Link script SetupTarget\r\n\r\n");
	
	target_setup();
}