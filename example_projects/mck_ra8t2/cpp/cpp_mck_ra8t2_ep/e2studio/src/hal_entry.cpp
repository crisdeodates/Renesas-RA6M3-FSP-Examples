/***********************************************************************************************************************
 * File Name    : hal_entry.cpp
 * Description  : Contains data structures and functions used in hal_entry.cpp
 **********************************************************************************************************************/
/***********************************************************************************************************************
* Copyright (c) 2023 - 2025 Renesas Electronics Corporation and/or its affiliates
*
* SPDX-License-Identifier: BSD-3-Clause
***********************************************************************************************************************/

#include "adc_ep.h"

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER

volatile bool g_ready_to_read = false;

/*******************************************************************************************************************//**
 * main() is generated by the RA Configuration editor and is used to generate threads if an RTOS is used. This function
 * is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{
    /* ADC object */
    adc_ep adc;
    fsp_err_t err = FSP_SUCCESS;
    while (true)
    {
        if (APP_CHECK_DATA)
        {
            err = adc.read_process_input_from_RTT ();

            /* Handle error */
            if (FSP_SUCCESS != err)
            {
                /* ADC scan start or stop failed, cleanup the ADC initialization */
                adc.deinit_adc_module ();
                /* Destructor, to delete the created object */
                adc.~adc_ep();
                APP_ERR_TRAP(err);
            }
        }
        /* Read the ADC output data and status */
        if (true == g_ready_to_read)
        {
            err = adc.adc_read_data ();
        }

        /* Handle error */
        if (FSP_SUCCESS != err)
        {
            /* ADC reading failed, cleanup the ADC initialization */
            adc.deinit_adc_module ();
            /* Destructor, to delete the created object */
            adc.~adc_ep();
            APP_ERR_TRAP(err);
        }
    }
#if BSP_TZ_SECURE_BUILD
    /* Enter non-secure code */
    R_BSP_NonSecureEnter();
#endif
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process. This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

        /* Enable reading from data flash */
        R_FACI_LP->DFLCTL = 1U;

        /* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
         * C runtime initialization, should negate the need for a delay since the initialization will typically take
         * more than 6us */
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup */

        /* Configure pins */
        R_IOPORT_Open (&IOPORT_CFG_CTRL, &IOPORT_CFG_NAME);

#if BSP_CFG_SDRAM_ENABLED

        /* Setup SDRAM and initialize it. Must configure pins first */
        R_BSP_SdramInit(true);
#endif
    }
}

#if BSP_TZ_SECURE_BUILD

FSP_CPP_HEADER
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ();

/* Trustzone Secure Projects require at least one nonsecure callable function in order to build
 * (Remove this if it is not required to build) */
BSP_CMSE_NONSECURE_ENTRY void template_nonsecure_callable ()
{

}
FSP_CPP_FOOTER

#endif
